import pandas as pd
import numpy as np
import pytest
from src.credit_fraud_detector.pipelines.data_preprocessing.nodes import load_and_preprocess_data
from sklearn.preprocessing import StandardScaler, RobustScaler

@pytest.fixture
def sample_data():
    # Create a DataFrame similar to the sample_creditcard.csv file
    data = {
        'Time': [0, 1, 2, 3, 4, 5],
        'V1': [-1.3598071336738, 1.19185711131486, -1.35835406159823, -0.966271711572087, -1.15823309349523, -0.425965884412454],
        'V2': [-0.0727811733098497, 0.26615071205963, -1.34016307473609, -0.185226008082898, 0.877736754848451, 0.960523044882985],
        'V3': [2.53634673796914, 0.16648011335321, 1.77320934263119, 1.79299333957872, 1.548717846511, 1.14110934232219],
        'V4': [1.37815522427443, 0.448154078460911, 0.379779593034328, -0.863291275036453, 0.403033933955121, -0.168252079760302],
        'V5': [-0.338320769942518, 0.0600176492822243, -0.503198133318193, -0.0103088796030823, -0.407193377311653, 0.42098688077219],
        'V6': [0.462387777762292, -0.0823608088155687, 1.80049938079263, 1.24720316752486, 0.0959214624684256, -0.0297275516639742],
        'V7': [0.239598554061257, -0.0788029833323113, 0.791460956450422, 0.23760893977178, 0.592940745385545, 0.476200948720027],
        'V8': [0.0986979012610507, 0.0851016549148104, 0.247675786588991, 0.377435874652262, -0.270532677192282, 0.260314333074874],
        'V9': [0.363786969611213, -0.255425128109186, -1.51465432260583, -1.38702406270197, 0.817739308235294, -0.56867137571251],
        'V10': [0.0907941719789316, -0.166974414004614, 0.207642865216696, -0.0549519224713749, 0.753074431976354, -0.371407196834471],
        'V11': [-0.551599533260813, 1.61272666105479, 0.624501459424895, -0.226487263835401, -0.822842877946363, 1.34126198001957],
        'V12': [-0.617800855762348, 1.06523531137287, 0.066083685268831, 0.178228225877303, 0.53819555014995, 0.359893837038039],
        'V13': [-0.991389847235408, 0.48909501589608, 0.717292731410831, 0.507756869957169, 1.3458515932154, -0.358090652573631],
        'V14': [-0.311169353699879, -0.143772296441519, -0.165945922763554, -0.28792374549456, -1.11966983471731, -0.137133700217612],
        'V15': [1.46817697209427, 0.635558093258208, 2.34586494901581, -0.631418117709045, 0.175121130008994, 0.517616806555742],
        'V16': [-0.470400525259478, 0.463917041022171, -2.89008319444231, -1.0596472454325, -0.451449182813529, 0.401725895589603],
        'V17': [0.207971241929242, -0.114804663102346, 1.10996937869599, -0.684092786345479, -0.237033239362776, -0.0581328233640131],
        'V18': [0.0257905801985591, -0.183361270123994, -0.121359313195888, 1.96577500349538, -0.0381947870352842, 0.0686531494425432],
        'V19': [0.403992960255733, -0.145783041325259, -2.26185709530414, -1.2326219700892, 0.803486924960175, -0.0331937877876282],
        'V20': [0.251412098239705, -0.0690831352230203, 0.524979725224404, -0.208037781160366, 0.408542360392758, 0.0849676720682049],
        'V21': [-0.018306777944153, -0.225775248033138, 0.247998153469754, -0.108300452035545, -0.00943069713232919, -0.208253514656728],
        'V22': [0.277837575558899, -0.638671952771851, 0.771679401917229, 0.00527359678253453, 0.79827849458971, -0.559824796253248],
        'V23': [-0.110473910188767, 0.101288021253234, 0.909412262347719, -0.190320518742841, -0.137458079619063, -0.0263976679795373],
        'V24': [0.0669280749146731, -0.339846475529127, -0.689280956490685, -1.17557533186321, 0.141266983824769, -0.371426583174346],
        'V25': [0.128539358273528, 0.167170404418143, -0.327641833735251, 0.647376034602038, -0.206009587619756, -0.232793816737034],
        'V26': [-0.189114843888824, 0.125894532368176, -0.139096571514147, -0.221928844458407, 0.502292224181569, 0.105914779097957],
        'V27': [0.133558376740387, -0.00898309914322813, -0.0553527940384261, 0.0627228487293033, 0.219422229513348, 0.253844224739337],
        'V28': [-0.0210530534538215, 0.0147241691924927, -0.0597518405929204, 0.0614576285006353, 0.215153147499206, 0.0810802569229443],
        'Amount': [149.62, 2.69, 378.66, 123.5, 69.99, 3.67],
        'Class': [0, 0, 0, 0, 0, 1]
    }
    return pd.DataFrame(data)

def test_load_and_preprocess_data(sample_data, tmpdir):
    # Save the sample data to a temporary CSV file
    sample_filepath = tmpdir.join("sample_creditcard.csv")
    sample_data.to_csv(sample_filepath, index=False)
    
    # Load and preprocess the data
    processed_data = load_and_preprocess_data(str(sample_filepath))
    
    # Assertions to check the preprocessing
    assert 'Time' not in processed_data.columns
    assert 'Amount' not in processed_data.columns
    assert 'scaled_amount' in processed_data.columns
    assert 'scaled_time' in processed_data.columns

    # Check if the scaling was applied correctly
    rob_scaler = RobustScaler()
    expected_scaled_amount = rob_scaler.fit_transform(sample_data['Amount'].values.reshape(-1,1)).flatten()
    expected_scaled_time = rob_scaler.fit_transform(sample_data['Time'].values.reshape(-1,1)).flatten()

    np.testing.assert_array_almost_equal(processed_data['scaled_amount'].values, expected_scaled_amount, decimal=6)
    np.testing.assert_array_almost_equal(processed_data['scaled_time'].values, expected_scaled_time, decimal=6)

    # Check if the other features are unchanged
    for col in sample_data.columns:
        if col not in ['Time', 'Amount']:
            np.testing.assert_array_almost_equal(processed_data[col].values, sample_data[col].values, decimal=6)

    # Check if the Class column is intact
    assert 'Class' in processed_data.columns
    assert processed_data['Class'].equals(sample_data['Class'])
